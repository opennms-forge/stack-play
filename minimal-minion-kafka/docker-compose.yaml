---
version: '3'

volumes:
  data-postgres: {}
  data-opennms: {}
  data-opennms-cfg: {}

services:
  database:
    image: ${DOCKER_REGISTRY:-docker.io}/postgres:${POSTGRES_VERSION:-15}
    container_name: database
    hostname: database
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - data-postgres:/var/lib/postgresql/data
    command: ["postgres", "-N", "200"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 30s
      retries: 3

  zookeeper:
    image: ${DOCKER_REGISTRY:-docker.io}/confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION:-5.5.0}
    container_name: zookeeper
    hostname: zookeeper
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: ${DOCKER_REGISTRY:-docker.io}/confluentinc/cp-kafka:${KAFKA_VERSION:-5.5.0}
    container_name: broker
    hostname: broker
    depends_on:
      - zookeeper
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 5 # The number of partitions > the number of Minions per Location, default is 1
    ports:
      - "29092:29092/tcp"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      KAFKA_CLUSTERS_0_NAME: onms-stack-play
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080/tcp"

  horizon:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${HORIZON_OCI:-horizon}:${ONMS_VERSION:-bleeding}
    container_name: horizon
    hostname: horizon
    sysctls:
      net.ipv4.ping_group_range: "0 429496729"
    depends_on:
      - database
      - zookeeper
      - broker
    environment:
      TZ: ${TIMEZONE:-America/New_York}
    volumes:
      - data-opennms:/opennms-data
      - data-opennms-cfg:/opt/opennms/etc
      - ./container-fs/horizon/opt/opennms/deploy:/opt/opennms/deploy
      - ./container-fs/horizon/opt/opennms-overlay:/opt/opennms-overlay
      - ./container-fs/horizon/etc/conf.d/confd.toml:/etc/confd/confd.toml
    command: ["-s"]
    ports:
      - "8101:8101/tcp"
      - "8980:8980/tcp"
      - "10162:1162/udp"
    healthcheck:
      test: [ "CMD", "curl", "-f", "-I", "http://localhost:8980/opennms/login.jsp" ]
      interval: 1m
      timeout: 5s
      retries: 3

  minion:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${MINION_OCI:-minion}:${ONMS_VERSION:-bleeding}
    container_name: minion
    hostname: minion
    sysctls:
      net.ipv4.ping_group_range: "0 429496729"
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      JAVA_MIN_MEM: 512M
      JAVA_MAX_MEM: 2048M
    volumes:
      - ./container-fs/minion/opt/minion/minion-config.yaml:/opt/minion/minion-config.yaml
    command: ["-f"]
    healthcheck:
      test: "/health.sh"
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "8201:8201/tcp"
      - "1162:1162/udp"
      - "1514:1514/udp"
